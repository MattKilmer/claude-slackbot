import { Octokit } from '@octokit/rest';
import { config } from '../../config/index.js';
import { logger } from '../../utils/logger.js';
import { GitHubPRResult } from '../../types/index.js';

/**
 * GitHub API service for pull request operations
 *
 * Uses GitHub REST API (via Octokit) to:
 * - Create pull requests
 * - Add labels, reviewers, assignees
 * - Comment on PRs
 */
class GitHubAPIService {
  private octokit: Octokit;
  private owner: string;
  private repo: string;

  constructor() {
    this.octokit = new Octokit({
      auth: config.github.token,
    });

    // Parse owner and repo from URL
    // Example: https://github.com/owner/repo.git -> owner=owner, repo=repo
    const match = config.github.targetRepoUrl.match(/github\.com[\/:]([^\/]+)\/([^\/\.]+)/);
    if (!match) {
      throw new Error(
        `Invalid GitHub URL format: ${config.github.targetRepoUrl}. Expected https://github.com/owner/repo.git`
      );
    }

    this.owner = match[1];
    this.repo = match[2];

    logger.debug('GitHub API initialized', {
      owner: this.owner,
      repo: this.repo,
    });
  }

  /**
   * Create a pull request
   *
   * @param branchName - The feature branch to merge
   * @param title - PR title
   * @param body - PR description (markdown supported)
   * @param baseBranch - Branch to merge into (default: main)
   */
  async createPullRequest(
    branchName: string,
    title: string,
    body: string,
    baseBranch?: string
  ): Promise<GitHubPRResult> {
    try {
      logger.info('📝 Creating pull request', {
        owner: this.owner,
        repo: this.repo,
        head: branchName,
        base: baseBranch || config.github.baseBranch,
      });

      const response = await this.octokit.pulls.create({
        owner: this.owner,
        repo: this.repo,
        title,
        body,
        head: branchName,
        base: baseBranch || config.github.baseBranch,
      });

      const prNumber = response.data.number;
      const prUrl = response.data.html_url;

      logger.success('Pull request created', {
        prNumber,
        prUrl,
      });

      return {
        success: true,
        prNumber,
        prUrl,
      };
    } catch (error: any) {
      // Handle common errors
      if (error.status === 422) {
        // Validation failed - might be duplicate PR
        const message = error.response?.data?.errors?.[0]?.message || error.message;
        logger.error('Failed to create PR - validation error', { message });
        return {
          success: false,
          error: `GitHub validation error: ${message}`,
        };
      }

      logger.error('Failed to create pull request', {
        error: error instanceof Error ? error.message : String(error),
        status: error.status,
      });

      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
      };
    }
  }

  /**
   * Format a PR description with analysis and changes
   */
  formatPRDescription(analysis: string, solution: string, filesChanged: string[]): string {
    return `## 🤖 Automated Fix by Claude

### Analysis
${analysis}

### Solution Applied
${solution}

### Files Changed (${filesChanged.length})
${filesChanged.map((file) => `- \`${file}\``).join('\n')}

### Testing
- [ ] Verify fix works as expected
- [ ] Check for any regressions
- [ ] Review code changes for quality

---

🤖 *This PR was automatically generated by [Claude AutoFix Bot](https://github.com/MattKilmer/claude-slackbot)*
*Co-authored-by: Claude <noreply@anthropic.com>*`;
  }

  /**
   * Add labels to a pull request
   */
  async addLabels(prNumber: number, labels: string[]): Promise<void> {
    try {
      await this.octokit.issues.addLabels({
        owner: this.owner,
        repo: this.repo,
        issue_number: prNumber,
        labels,
      });

      logger.debug('Labels added to PR', { prNumber, labels });
    } catch (error) {
      logger.warn('Failed to add labels', {
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  /**
   * Add a comment to a pull request
   */
  async addComment(prNumber: number, comment: string): Promise<void> {
    try {
      await this.octokit.issues.createComment({
        owner: this.owner,
        repo: this.repo,
        issue_number: prNumber,
        body: comment,
      });

      logger.debug('Comment added to PR', { prNumber });
    } catch (error) {
      logger.warn('Failed to add comment', {
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  /**
   * Request reviewers for a pull request
   */
  async requestReviewers(prNumber: number, reviewers: string[]): Promise<void> {
    try {
      await this.octokit.pulls.requestReviewers({
        owner: this.owner,
        repo: this.repo,
        pull_number: prNumber,
        reviewers,
      });

      logger.debug('Reviewers requested', { prNumber, reviewers });
    } catch (error) {
      logger.warn('Failed to request reviewers', {
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  /**
   * Get repository information
   */
  getRepoInfo() {
    return {
      owner: this.owner,
      repo: this.repo,
      fullName: `${this.owner}/${this.repo}`,
    };
  }
}

// Export singleton instance
export const githubAPIService = new GitHubAPIService();
